version: '3.8'

services:
  # Frontend (React + Vite)
  frontend:
    build: 
      context: .
      dockerfile: client/Dockerfile
    ports:
      - "5000:5000"
    environment:
      - VITE_API_URL=http://localhost:8000
    volumes:
      - ./client:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - ai-orchestra

  # Backend (Python FastAPI)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DEBUG=true
      - DATABASE_URL=postgresql://aiorch:aiorch@postgres:5432/aiorch
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=your-secret-key-change-in-production
      - ENCRYPTION_KEY=your-encryption-key-change-in-production
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - AZURE_OPENAI_KEY=${AZURE_OPENAI_KEY:-}
      - AZURE_OPENAI_ENDPOINT=${AZURE_OPENAI_ENDPOINT:-}
      - SALESFORCE_CLIENT_ID=${SALESFORCE_CLIENT_ID:-}
      - SALESFORCE_CLIENT_SECRET=${SALESFORCE_CLIENT_SECRET:-}
      - NETSUITE_ACCOUNT_ID=${NETSUITE_ACCOUNT_ID:-}
      - VECTOR_STORE_TYPE=pgvector
      - EMBEDDING_PROVIDER=huggingface
    volumes:
      - ./backend:/app
      - ./shared:/app/shared
    depends_on:
      - postgres
      - redis
    networks:
      - ai-orchestra
    command: ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

  # PostgreSQL Database with PGVector
  postgres:
    image: pgvector/pgvector:pg15
    environment:
      - POSTGRES_DB=aiorch
      - POSTGRES_USER=aiorch
      - POSTGRES_PASSWORD=aiorch
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - ai-orchestra

  # Redis for caching and task queue
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ai-orchestra
    command: redis-server --appendonly yes

  # Celery Worker for background tasks
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://aiorch:aiorch@postgres:5432/aiorch
      - REDIS_URL=redis://redis:6379
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - SECRET_KEY=your-secret-key-change-in-production
      - ENCRYPTION_KEY=your-encryption-key-change-in-production
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
    volumes:
      - ./backend:/app
    depends_on:
      - postgres
      - redis
    networks:
      - ai-orchestra
    command: ["celery", "-A", "main", "worker", "--loglevel=info"]

  # Celery Beat for scheduled tasks
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://aiorch:aiorch@postgres:5432/aiorch
      - REDIS_URL=redis://redis:6379
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - SECRET_KEY=your-secret-key-change-in-production
    volumes:
      - ./backend:/app
    depends_on:
      - postgres
      - redis
    networks:
      - ai-orchestra
    command: ["celery", "-A", "main", "beat", "--loglevel=info"]

  # Milvus Vector Database (Alternative to PGVector)
  milvus:
    image: milvusdb/milvus:v2.3.2
    environment:
      - ETCD_ENDPOINTS=etcd:2379
      - MINIO_ADDRESS=minio:9000
    ports:
      - "19530:19530"
    depends_on:
      - etcd
      - minio
    volumes:
      - milvus_data:/var/lib/milvus
    networks:
      - ai-orchestra
    profiles:
      - milvus

  # Etcd for Milvus
  etcd:
    image: quay.io/coreos/etcd:v3.5.5
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - etcd_data:/etcd
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    networks:
      - ai-orchestra
    profiles:
      - milvus

  # MinIO for Milvus
  minio:
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    environment:
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
    ports:
      - "9001:9001"
      - "9000:9000"
    volumes:
      - minio_data:/data
    command: minio server /data --console-address ":9001"
    networks:
      - ai-orchestra
    profiles:
      - milvus

  # Ollama for local LLM inference
  ollama:
    image: ollama/ollama:latest
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - ai-orchestra
    profiles:
      - ollama

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - ai-orchestra
    profiles:
      - monitoring

  # Monitoring with Grafana
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    networks:
      - ai-orchestra
    profiles:
      - monitoring

volumes:
  postgres_data:
  redis_data:
  milvus_data:
  etcd_data:
  minio_data:
  ollama_data:
  prometheus_data:
  grafana_data:

networks:
  ai-orchestra:
    driver: bridge

# Development override
# Run with: docker-compose -f docker-compose.yml -f docker-compose.dev.yml up
